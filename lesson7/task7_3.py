"""3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его
конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть
реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (
__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение,
уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно
осуществляться округление значения до целого числа.
- Сложение. Объединение двух клеток. При этом число ячеек общей
клетки должно равняться сумме ячеек исходных двух клеток.
- Вычитание. Участвуют две клетки. Операцию необходимо
выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
- Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
этих двух клеток.
- Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
деление количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку
вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование
ряда не хватает, то в последний ряд записываются все оставшиеся."""


class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):
        return f'Сложение. Клетки объединились. Текущий размер составляет: {self.quantity + other.quantity} клеток'

    def __sub__(self, other):
        sub = self.quantity - other.quantity
        return f'Вычитаниею Клетки разделились. Текущий размер составляет: {sub} клеток' if sub > 0 else \
            'Клетка исчезла :('

    def __mul__(self, other):
        return f'Умножение. Клетки умножились. Текущий размер составляет: {self.quantity * other.quantity} клеток'

    def __truediv__(self, other):
        return f'Деление. Создались общие клетки. Текущий размер составляет:  {self.quantity // other.quantity} клетки'

    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.quantity / cells_in_row)):
            row += f'{"*" * cells_in_row} \\n'
        row += f'{"*" * (self.quantity % cells_in_row)}'
        return row


cell = Cell(6)
cell_2 = Cell(2)
print(cell + cell_2)
print(cell - cell_2)
print(cell * cell_2)
print(cell / cell_2)
print(cell.make_order(7))
